// BHGX_CardActiveX.idl : BHGX_CardActiveX 的 IDL 源
//

// 此文件将由 MIDL 工具处理以
// 产生类型库(BHGX_CardActiveX.tlb)和封送处理代码。

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(02D30C94-A1B9-4663-99A9-C9F856ED3137),
	dual,
	nonextensible,
	helpstring("ICardProcess 接口"),
	pointer_default(unique)
]
interface ICardProcess : IDispatch{
	[id(1), helpstring("方法iATLGetCardVersion")] HRESULT iATLGetCardVersion([out,retval] BSTR* szVersion);
	[id(2), helpstring("方法iATLCardInit")] HRESULT iATLCardInit( [out,retval]LONG *nRet);
	[id(3), helpstring("方法iATLReadInfo")] HRESULT iATLReadInfo(LONG nFlag, [out,retval] BSTR* szReadXML);
	[id(4), helpstring("方法iATLWriteInfo")] HRESULT iATLWriteInfo(BSTR szXML, [out,retval]LONG *nRet);
	[id(5), helpstring("方法iATLQueryInfo")] HRESULT iATLQueryInfo(BSTR szQuerySource, [out,retval] BSTR* szResult);
	[id(6), helpstring("方法iATLerr")] HRESULT iATLerr([out,retval]BSTR* szError);
	[id(7), helpstring("方法iATLFormatCard")] HRESULT iATLFormatCard([out,retval]LONG *nRet);
	[id(8), helpstring("方法iATLCreateCard")] HRESULT iATLCreateCard(BSTR szCardXML, [out,retval]LONG *nRet);
	[id(9), helpstring("方法iATLPrintCard")] HRESULT iATLPrintCard(BSTR pszPrinterType, BSTR pszCardCoverDataXml,
		BSTR pszCardCoverXml, [out,retval]LONG *nRet);
	[id(10), helpstring("方法iATLPatchCard")] HRESULT iATLPatchCard(BSTR szCardXML, BSTR pszCardCoverDataXml, 
		BSTR pszPrinterType, BSTR pszCardCoverXml, [out,retval]LONG *nRet);
	[id(11), helpstring("方法iATLCreateCardData")] HRESULT iATLCreateCardData(BSTR szCreateData, BSTR szLicense);
	[id(12), helpstring("方法iATLScanCard")] HRESULT iATLScanCard([out,retval] LONG* nRet);
	[id(13), helpstring("方法iATLCardClose")] HRESULT iATLCardClose([out,retval]LONG* nRet);
	[id(15), helpstring("方法iATLReadCardMessageForNH")] HRESULT iATLReadCardMessageForNH(BSTR pszCardCheckXML, BSTR pszCardRewritePackageXML, [out,retval] BSTR* pszXml);
	[id(16), helpstring("方法iATLReadHISInfo")] HRESULT iATLReadHISInfo(BSTR pszCardCheckXML, BSTR pszCardRewritePackageXML,[out,retval] BSTR* szXML);
	[id(17), helpstring("方法iATLReadInfoForXJ")] HRESULT iATLReadInfoForXJ(BSTR pszCardCheckXML, BSTR pszCardRewritePackageXML,[out,retval] BSTR* szXML);
	[id(18), helpstring("方法iATLCardIsEmpty")] HRESULT iATLCardIsEmpty([out,retval] LONG* bEmpty);
	[id(19), helpstring("方法iATLCheckMsgForNH")] HRESULT iATLCheckMsgForNH(BSTR bstrCheckWSDL, BSTR bstrServerURL, [out,retval]  BSTR* strCheckRet);
	[id(20), helpstring("方法iATLReadConfigMsg")] HRESULT iATLReadConfigMsg(BSTR bstrConfigInfo, [out,retval] BSTR* bstrReadXML);
	[id(21), helpstring("方法iATLRegMsgForNH")] HRESULT iATLRegMsgForNH(BSTR bstrServerURL, [out,retval] BSTR* bstrReadXML);
	[id(22), helpstring("方法iATLEncryFile")] HRESULT iATLEncryFile(BSTR bstrfilename, [out,retval] LONG* nProCode);
	[id(23), helpstring("方法iATLGetPrinterList")] HRESULT iATLGetPrinterList([out,retval] BSTR* bstrPrinterXML);
	[id(24), helpstring("方法iATLReadOnlyHIS")] HRESULT iATLReadOnlyHIS([out,retval] BSTR* bstrHISInfo);
	[id(25), helpstring("方法iATLCardOpen")] HRESULT iATLCardOpen([out,retval] LONG* Ret);
	[id(26), helpstring("方法iATLCardDeinit")] HRESULT iATLCardDeinit([out,retval] LONG* Ret);
	[id(27), helpstring("方法iATLCreateLicense")] HRESULT iATLCreateLicense(BSTR timeFMT, LONG* ret);
	[id(28), helpstring("方法iATLFormatHospInfo")] HRESULT iATLFormatHospInfo([out,retval] LONG* pRet);
	[id(29), helpstring("方法iATLWriteHospInfo")] HRESULT iATLWriteHospInfo(BSTR xml,[out,retval] LONG* pRet);
	[id(30), helpstring("方法iATLReadClinicInfo")] HRESULT iATLReadClinicInfo(BSTR pszCode, [out,retval] BSTR* readXML);
	[id(31), helpstring("方法iATLReadMedicalInfo")] HRESULT iATLReadMedicalInfo(BSTR pszCode, [out,retval] BSTR* readXML);
	[id(32), helpstring("方法iATLReadFeeInfo")] HRESULT iATLReadFeeInfo(BSTR pszCode, [out,retval] BSTR* readXML);
	[id(33), helpstring("方法iATLReadOnlyHISLog")] HRESULT iATLReadOnlyHISLog(BSTR logConfXml, [out,retval] BSTR* bstrHISInfo);
	[id(35), helpstring("方法iATLReadInfoForXJLog")] HRESULT iATLReadInfoForXJLog(BSTR pszCardCheckWSDL, BSTR pszCardServerURL, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(36), helpstring("方法iATLReadHISInfoLog")] HRESULT iATLReadHISInfoLog(BSTR pszCardCheckWSDL, BSTR pszCardServerURL, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(38), helpstring("方法iATLReadMedicalInfoLog")] HRESULT iATLReadMedicalInfoLog(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(39), helpstring("方法iATLReadFeeInfoLog")] HRESULT iATLReadFeeInfoLog(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(40), helpstring("方法iATLWriteHospInfoLog")] HRESULT iATLWriteHospInfoLog(BSTR xml, BSTR pszLogXml, [out,retval] LONG* pRet);
	[id(41), helpstring("方法iATLReadClinicInfoLog")] HRESULT iATLReadClinicInfoLog(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(42), helpstring("方法iATLReadOnlyHISLocal")] HRESULT iATLReadOnlyHISLocal(BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(43), helpstring("方法iATLReadInfoForXJLocal")] HRESULT iATLReadInfoForXJLocal(BSTR pszCardCheckWSDL, BSTR pszCardServerURL, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(44), helpstring("方法iATLReadHISInfoLocal")] HRESULT iATLReadHISInfoLocal(BSTR pszCardCheckWSDL, BSTR pszCardServerURL, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(45), helpstring("方法iATLReadMedicalInfoLocal")] HRESULT iATLReadMedicalInfoLocal(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(46), helpstring("方法iATLReadFeeInfoLocal")] HRESULT iATLReadFeeInfoLocal(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(48), helpstring("方法iATLReadClinicInfoLocal")] HRESULT iATLReadClinicInfoLocal(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(49), helpstring("方法iATLWriteHospInfoLocal")] HRESULT iATLWriteHospInfoLocal(BSTR xml, BSTR pszLogXml, [out,retval] LONG* pRet);
	[id(50), helpstring("方法iATLRegMsgForNHLog")] HRESULT iATLRegMsgForNHLog(BSTR bstrServerURL, BSTR pszLogXml, [out,retval] BSTR* bstrReadXML);
	[id(51), helpstring("方法iATLReadCardMessageForNHLog")] HRESULT iATLReadCardMessageForNHLog(BSTR pszCardCheckWSDL, BSTR pszCardRewritePackageWSDL, BSTR pszLogXml, [out,retval] BSTR* pszXml);
	[id(52), helpstring("方法iATLWriteHospInfoOnlyLog")] HRESULT iATLWriteHospInfoOnlyLog(BSTR xml, BSTR pszLogXml, [out,retval] LONG* pRet);
	[id(53), helpstring("方法iATLReadClinicInfoOnlyLog")] HRESULT iATLReadClinicInfoOnlyLog(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(54), helpstring("方法iATLReadFeeInfoOnlyLog")] HRESULT iATLReadFeeInfoOnlyLog(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(55), helpstring("方法iATLReadMedicalInfoOnlyLog")] HRESULT iATLReadMedicalInfoOnlyLog(BSTR pszCode, BSTR pszLogXml, [out,retval] BSTR* xml);
	[id(56), helpstring("方法iATLReadCardMessageForNHLocal")] HRESULT iATLReadCardMessageForNHLocal(BSTR pszLogXml, [out,retval] BSTR* pszXml);
	[id(57), helpstring("方法iATLCheckMsgForNHLocal")] HRESULT iATLCheckMsgForNHLocal(BSTR pszLogXml, [out,retval] BSTR* pszXml);
	[id(58), helpstring("方法iATLReadOnlyCardMessageForNH")] HRESULT iATLReadOnlyCardMessageForNH([out,retval] BSTR* pszXml);
	[id(59), helpstring("方法iATLReadAll")] HRESULT iATLReadAll([out,retval] BSTR* xml);
	[id(60), helpstring("方法iATLRWRecycle")] HRESULT iATLRWRecycle(BSTR pszCardCorp, BSTR pszXinCorp, LONG counts, BSTR write_xml, [out,retval] BSTR* pszXml);
};
[
	uuid(892D8909-1013-42C0-86C3-62653E0797B3),
	version(1.0),
	helpstring("BHGX_CardActiveX 1.0 类型库")
]
library BHGX_CardActiveXLib
{
	importlib("stdole2.tlb");
	[
		uuid(8610611D-8094-461B-B83A-881CCB340D3E),
		helpstring("CardProcess Class")
	]
	coclass CardProcess
	{
		[default] interface ICardProcess;
	};
};
