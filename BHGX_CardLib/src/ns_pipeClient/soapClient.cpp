/* soapClient.cpp
   Generated by gSOAP 2.7.17 from ns_pipe.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.17 2011-09-26 14:35:16 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__nh_USCOREpipe(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__nh_USCOREpipe *ns1__nh_USCOREpipe, _ns1__nh_USCOREpipeResponse *ns1__nh_USCOREpipeResponse)
{	struct __ns2__nh_USCOREpipe soap_tmp___ns2__nh_USCOREpipe;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/nh_webservice/n_api.asmx";
	if (!soap_action)
		soap_action = "http://tempurl.org/nh_pipe";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__nh_USCOREpipe.ns1__nh_USCOREpipe = ns1__nh_USCOREpipe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__nh_USCOREpipe(soap, &soap_tmp___ns2__nh_USCOREpipe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__nh_USCOREpipe(soap, &soap_tmp___ns2__nh_USCOREpipe, "-ns2:nh_pipe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__nh_USCOREpipe(soap, &soap_tmp___ns2__nh_USCOREpipe, "-ns2:nh_pipe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__nh_USCOREpipeResponse)
		return soap_closesock(soap);
	ns1__nh_USCOREpipeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__nh_USCOREpipeResponse->soap_get(soap, "ns1:nh_pipeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__nh_USCOREpipe(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__nh_USCOREpipe *ns1__nh_USCOREpipe, _ns1__nh_USCOREpipeResponse *ns1__nh_USCOREpipeResponse)
{	struct __ns3__nh_USCOREpipe soap_tmp___ns3__nh_USCOREpipe;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/nh_webservice/n_api.asmx";
	if (!soap_action)
		soap_action = "http://tempurl.org/nh_pipe";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__nh_USCOREpipe.ns1__nh_USCOREpipe = ns1__nh_USCOREpipe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__nh_USCOREpipe(soap, &soap_tmp___ns3__nh_USCOREpipe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__nh_USCOREpipe(soap, &soap_tmp___ns3__nh_USCOREpipe, "-ns3:nh_pipe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__nh_USCOREpipe(soap, &soap_tmp___ns3__nh_USCOREpipe, "-ns3:nh_pipe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__nh_USCOREpipeResponse)
		return soap_closesock(soap);
	ns1__nh_USCOREpipeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__nh_USCOREpipeResponse->soap_get(soap, "ns1:nh_pipeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
