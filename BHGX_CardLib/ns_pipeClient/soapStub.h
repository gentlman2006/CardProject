/* soapStub.h
   Generated by gSOAP 2.7.17 from ns_pipe.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	"http://tempurl.org"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__nh_USCOREpipe
#define SOAP_TYPE__ns1__nh_USCOREpipe (7)
/* ns1:nh_pipe */
class SOAP_CMAC _ns1__nh_USCOREpipe
{
public:
	char *parms;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE__ns1__nh_USCOREpipe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__nh_USCOREpipe(): parms(NULL), soap(NULL) { _ns1__nh_USCOREpipe::soap_default(NULL); }
	virtual ~_ns1__nh_USCOREpipe() { }
};
#endif

#ifndef SOAP_TYPE__ns1__nh_USCOREpipeResponse
#define SOAP_TYPE__ns1__nh_USCOREpipeResponse (8)
/* ns1:nh_pipeResponse */
class SOAP_CMAC _ns1__nh_USCOREpipeResponse
{
public:
	char *nh_USCOREpipeResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE__ns1__nh_USCOREpipeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__nh_USCOREpipeResponse(): nh_USCOREpipeResult(NULL), soap(NULL) { _ns1__nh_USCOREpipeResponse::soap_default(NULL); }
	virtual ~_ns1__nh_USCOREpipeResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns2__nh_USCOREpipe
#define SOAP_TYPE___ns2__nh_USCOREpipe (13)
/* Operation wrapper: */
struct __ns2__nh_USCOREpipe
{
public:
	_ns1__nh_USCOREpipe *ns1__nh_USCOREpipe;	/* optional element of type ns1:nh_pipe */
};
#endif

#ifndef SOAP_TYPE___ns3__nh_USCOREpipe
#define SOAP_TYPE___ns3__nh_USCOREpipe (15)
/* Operation wrapper: */
struct __ns3__nh_USCOREpipe
{
public:
	_ns1__nh_USCOREpipe *ns1__nh_USCOREpipe;	/* optional element of type ns1:nh_pipe */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (16)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (17)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (19)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (22)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (23)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__nh_USCOREpipe(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__nh_USCOREpipe *ns1__nh_USCOREpipe, _ns1__nh_USCOREpipeResponse *ns1__nh_USCOREpipeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__nh_USCOREpipe(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__nh_USCOREpipe *ns1__nh_USCOREpipe, _ns1__nh_USCOREpipeResponse *ns1__nh_USCOREpipeResponse);

#endif

/* End of soapStub.h */
